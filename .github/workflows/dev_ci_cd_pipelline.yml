# Ephemeral App in blocking mode
#
## load env vars:
#    export $(grep -v '^#' .env | xargs)
#    export $(grep -v '^#' .env | xargs -d '\n') (handles spaces in variables, likely not necessary)
#    requires pulling env file into docker

## Snyk APi & Web Ephemeral Single Target Github Action
# This action will run Snyk API & Web (SAW) scans on the repository.
# assumes:
#    - target/scan config has already been created
#    - connectivity / name resolution relies on docker
#    
# Variables:
# - Snyk API & Web Environment (in github repo $repo/.github/.snykaw)
#   + saw_api: defaults to api.probely.com
#   + saw_target_id: Snyk Web target.
#   + scan_type: default is incremental
#   + scan_settings: default is to use existing targat settings
#
# - github secrets
#   + saw_token 
#   + saw_agent_key
#
# - github Context
#   + target_branch: populated from github context
#   + target_release: populated from github context
#
# - opitonal configs
#   + scan-type: defaults to incremental
#   + scan-profile: defailts to existing target scan settings
#   + scan-labels: defaults to branch and release
#   + scan-action: block-high, block-medium, block, or none, default is block


name: probely_ephemeral_tests

on:
  push:
    branches: [ "main", "qa", "dev" ]
  pull_request:
    branches: [ "main", "qa", "dev" ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to scan'
        required: true
        default: 'dev'
      release:
        description: 'Release to scan'
        required: true
        default: 'latest'

# Environment variables 
# setting these specifically to allow for east debugging and compatibility with push/pull/release/workflow_dispatch 
# environment options.
env:
#  DOCKER_NETWORK: ( ${{ vars.SAW_TARGET_NAME }}-net | ginandjuice-net )   # docker network name
  DOCKER_NETWORK: cicd
  REPO: ( ${{ github.event.repository.name }} | 'juice-shop' )            # github repo name
  BRANCH:  ( ${{ github.event.base_ref }} | dev )                         # github branch name   
  RELEASE: ( ${{ github.event.release.tag_name }} | latest )              # github release name            
  # Snyk API & Web Environment
  SAW_API_URL: api.probely.com                                            # Snyk API & Web API url
  SAW_API_KEY: ${{ secrets.SAW_API_KEY }}                                 # Snyk API & Web API key 
  SAW_AGENT_KEY: ${{ secrets.SAW_AGENT_KEY }}                             # Snyk API & Web agent key
  SAW_TARGET_NAME: ( ${{ vars.SAW_TARGET_NAME }} | JuiceShop )            # Snyk API & Web target name    
  SAW_TARGET_URL: ( ${{ vars.SAW_TARGET_URL }} | http://juiceshop )       # Snyk API & Web target name
  SAW_TARGET_ID: ( ${{ vars.SAW_TARGET_ID }} | 123456789 )                # Snyk API & Web target ID
  # Snyk API & Web optional fields
  SCAN_TYPE: ( ${{ vars.SAW_SCAN_TYPE }} | incremental )                  # Snyk API & Web scan type
  SCAN_PROFILE: ( ${{ vars.SAW_SCAN_PROFILE }} | existing )               # Snyk API & Web scan profile
  SCAN_ACTION: ( ${{ vars.SAW_CICD_ACTION }} | block-high )               # Snyk API & Web scan action

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Create a custom Docker network
      - name: Create custom Docker network
        run: docker network create $DOCKER_NETWORK

      # Step 4: Build and run the Docker app container
      - name: Build and run app container
        run: |
          # Build the Docker image
          docker build -t $SAW_TARGET_NAME .

          # Run the Docker container with a custom hostname
          docker run --name $SAW_TARGET_NAME \
            --hostname $SAW_TARGET_NAME \
            --network $DOCKER_NETWORK \
            --network-alias $SAW_TARGET_NAME \
            -d $SAW_TARGET_NAME

      # Step 5: Wait for the app to start
      - name: Wait for app to start
        run: |
          # Wait until the container is ready
          for i in {1..10}; do
            if curl -s $SAW_TARGET_URL > /dev/null; then
              echo "App is up!";
              break;
            fi
            echo "Waiting for the app to be ready...";
            sleep 2;
          done

      # Step 6: Test application with curl
      - name: Test application with curl
        run: |
          # Make a request to the web app using the custom hostname
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $SAW_TARGET_URL)
          
          if [ "$RESPONSE" -ne 200 ]; then
            echo "App test failed with HTTP status $RESPONSE";
            exit 1;
          fi

          curl -s -i $SAW_TARGET_URL
          
          echo "App test passed with HTTP status $RESPONSE";

      # Setp 7: Start scanning agent
      - name: Start Scanning Agent
        run: |
          # Using docker agent
          docker run -d --name probely-agent \
            --cap-add NET_ADMIN \
            --network $DOCKER_NETWORK \
            -e FARCASTER_AGENT_TOKEN=$SAW_AGENT_KEY \
            --device /dev/net/tun probely/farcaster-onprem-agent:v3

      # Step 9: Wait for agent to stat
      - name: Wait for agent to stat
        run: |
          # Wait until the probely-agent is ready
          for i in {1..10}; do
            echo "-----------------------------------"
            AGENT_RUNNING=$(docker logs probely-agent | grep 'Running...' | wc -l)
            if [ $AGENT_RUNNING == "1" ]; then
              echo "Agent is running!";
              echo "------------------------"
              docker logs probely-agent
              echo "------------------------"
              sleep 10
              break;
            fi
            sleep 2;
          done
      
      # Step 10: Install Probely CLI
      - name: Install Probely CLI
        run: |
          # Install Probely CLI
          pip install probely
          # Test probely GET TARGETS
          probely targets get --api-key ${{ secrets.PROBELY_API_KEY }}
      
      # Step 11: Start Scan
      - name: Start Scan
        run: |
          for i in {1..20}; do
            echo "-----------------------------------"
            SCAN_ID=$(probely targets start-scan ${{ vars.TARGET_ID }} -o IDS_ONLY --api-key ${{ secrets.PROBELY_API_KEY }})
            echo ${SCAN_ID}
            if [ -f ${SCAN_ID} ]; then
              echo "Scan didn't start... Retry start-scan"
            else
              echo "Scan started with SCAN ID: ${SCAN_ID}";
              echo "SCAN_ID=${SCAN_ID}" >> $GITHUB_ENV
              break;
            fi
            sleep 5
          done
          if [ -f $SCAN_ID ]; then
            echo "No Scan ID, aborting..."
            docker stop test-app
            docker stop probely-agent
            docker rm test-app
            docker rm probely-agent
            docker network rm custom-network
            exit 1
          fi

      # Step 12: Wait for scan to end
      - name: Wait for scan to end
        run: |
          # Wait until scan ends
          while true; do
            echo "-----------------------------------"
            SCAN_OUTPUT=$(probely scans get ${SCAN_ID} --api-key ${{ secrets.PROBELY_API_KEY }} | tail -1)
            echo ${SCAN_OUTPUT}
            echo "-----------------------------------"
            SCAN_STATUS=$(probely scans get ${SCAN_ID} --api-key ${{ secrets.PROBELY_API_KEY }} -o JSON | jq -r '.[0].status')
            if [ $SCAN_STATUS == "started" ] || [ $SCAN_STATUS == "queued" ]; then
              echo "Scan is running or queued!";
            else
              echo "Scan is not running... finishing"
              break;
            fi
            sleep 30;
          done

      # Step 13: check high vulnerabities
      - name: Check for high vulnerabilities
        run: |
          HIGH_VULNS=$(probely scans get ${SCAN_ID} --api-key ${{ secrets.PROBELY_API_KEY }} -o JSON | jq -r '.[0].highs')
          echo "HIGH vulnerabilities: ${HIGH_VULNS}"
          if [ $HIGH_VULNS -gt 0 ]; then
            echo "Scan has High vulnerabilities... aborting"
            docker stop test-app
            docker stop probely-agent
            docker rm test-app
            docker rm probely-agent
            docker network rm custom-network

            exit 1
          else
            echo "Scan doesn't have high vulnerabilities"
          fi

      # Step 14: Clean up
      - name: Clean up Docker resources
        run: |
          docker stop test-app
          docker stop probely-agent
          docker rm test-app
          docker rm probely-agent
          docker network rm custom-network
